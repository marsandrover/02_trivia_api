{"version":3,"sources":["components/FormView.js","components/Question.js","components/Search.js","components/QuestionView.js","components/Header.js","components/QuizView.js","App.js","serviceWorker.js","index.js"],"names":["FormView","props","submitQuestion","event","preventDefault","$","ajax","url","type","dataType","contentType","data","JSON","stringify","question","state","answer","difficulty","category","xhrFields","withCredentials","crossDomain","success","result","document","getElementById","reset","error","alert","handleChange","setState","target","name","value","categories","id","className","onSubmit","this","onChange","Object","keys","map","key","Component","Question","visibleAnswer","alt","src","onClick","questionAction","flipVisibility","style","Search","query","getInfo","submitSearch","handleInputChange","search","placeholder","ref","input","QuestionView","getQuestions","page","questions","totalQuestions","total_questions","currentCategory","current_category","getByCategory","searchTerm","action","window","confirm","num","pageNumbers","maxPage","Math","ceil","i","push","selectPage","q","ind","createPagination","Header","uri","location","href","origin","navTo","QuizView","selectCategory","quizCategory","getNextQuestion","previousQuestions","currentQuestion","previous_questions","quiz_category","showAnswer","guess","forceEnd","submitGuess","evaluate","evaluateAnswer","numCorrect","restartGame","formatGuess","replace","toLowerCase","split","includes","length","renderFinalScore","renderCorrectAnswer","renderPlay","renderPrePlay","App","path","exact","component","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5987df21.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport $ from 'jquery';\r\n\r\nimport '../stylesheets/FormView.css';\r\n\r\nclass FormView extends Component {\r\n  constructor(props){\r\n    super();\r\n    this.state = {\r\n      question: \"\",\r\n      answer: \"\",\r\n      difficulty: 1,\r\n      category: 1,\r\n      categories: {}\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    $.ajax({\r\n      url: `/categories`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: (result) => {\r\n        this.setState({ categories: result.categories })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load categories. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  submitQuestion = (event) => {\r\n    event.preventDefault();\r\n    $.ajax({\r\n      url: '/questions', //TODO: update request URL\r\n      type: \"POST\",\r\n      dataType: 'json',\r\n      contentType: 'application/json',\r\n      data: JSON.stringify({\r\n        question: this.state.question,\r\n        answer: this.state.answer,\r\n        difficulty: this.state.difficulty,\r\n        category: this.state.category\r\n      }),\r\n      xhrFields: {\r\n        withCredentials: true\r\n      },\r\n      crossDomain: true,\r\n      success: (result) => {\r\n        document.getElementById(\"add-question-form\").reset();\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to add question. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({[event.target.name]: event.target.value})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"add-form\">\r\n        <h2>Add a New Trivia Question</h2>\r\n        <form className=\"form-view\" id=\"add-question-form\" onSubmit={this.submitQuestion}>\r\n          <label>\r\n            Question\r\n            <input type=\"text\" name=\"question\" onChange={this.handleChange}/>\r\n          </label>\r\n          <label>\r\n            Answer\r\n            <input type=\"text\" name=\"answer\" onChange={this.handleChange}/>\r\n          </label>\r\n          <label>\r\n            Difficulty\r\n            <select name=\"difficulty\" onChange={this.handleChange}>\r\n              <option value=\"1\">1</option>\r\n              <option value=\"2\">2</option>\r\n              <option value=\"3\">3</option>\r\n              <option value=\"4\">4</option>\r\n              <option value=\"5\">5</option>\r\n            </select>\r\n          </label>\r\n          <label>\r\n            Category\r\n            <select name=\"category\" onChange={this.handleChange}>\r\n              {Object.keys(this.state.categories).map(id => {\r\n                  return (\r\n                    <option key={id} value={id}>{this.state.categories[id]}</option>\r\n                  )\r\n                })}\r\n            </select>\r\n          </label>\r\n          <input type=\"submit\" className=\"button\" value=\"Submit\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FormView;\r\n","import React, { Component } from 'react';\r\nimport '../stylesheets/Question.css';\r\n\r\nclass Question extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      visibleAnswer: false\r\n    }\r\n  }\r\n\r\n  flipVisibility() {\r\n    this.setState({visibleAnswer: !this.state.visibleAnswer});\r\n  }\r\n\r\n  render() {\r\n    const { question, answer, category, difficulty } = this.props;\r\n    return (\r\n      <div className=\"Question-holder\">\r\n        <div className=\"Question\">{question}</div>\r\n        <div className=\"Question-status\">\r\n          <img className=\"category\" alt=\"category\"src={`${category}.svg`}/>\r\n          <div className=\"difficulty\">Difficulty: {difficulty}</div>\r\n          <img src=\"delete.png\" className=\"delete\" alt=\"delete\" onClick={() => this.props.questionAction('DELETE')}/> \r\n          \r\n        </div>\r\n        <div className=\"show-answer button\"\r\n            onClick={() => this.flipVisibility()}>\r\n            {this.state.visibleAnswer ? 'Hide' : 'Show'} Answer\r\n          </div>\r\n        <div className=\"answer-holder\">\r\n          <span style={{\"visibility\": this.state.visibleAnswer ? 'visible' : 'hidden'}}>Answer: {answer}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Question;","import React, { Component } from 'react'\r\n\r\nclass Search extends Component {\r\n  state = {\r\n    query: '',\r\n  }\r\n\r\n  getInfo = (event) => {\r\n    event.preventDefault();\r\n    this.props.submitSearch(this.state.query)\r\n  }\r\n\r\n  handleInputChange = () => {\r\n    this.setState({\r\n      query: this.search.value\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.getInfo}>\r\n        <input\r\n          placeholder=\"Search questions...\"\r\n          ref={input => this.search = input}\r\n          onChange={this.handleInputChange}\r\n        />\r\n        <input type=\"submit\" value=\"Submit\" className=\"button\"/>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Search\r\n","import React, { Component } from 'react';\r\n\r\nimport '../stylesheets/App.css';\r\nimport Question from './Question';\r\nimport Search from './Search';\r\nimport $ from 'jquery';\r\n\r\nclass QuestionView extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      questions: [],\r\n      page: 1,\r\n      totalQuestions: 0,\r\n      categories: {},\r\n      currentCategory: null,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getQuestions();\r\n  }\r\n\r\n  getQuestions = () => {\r\n    $.ajax({\r\n      url: `/questions?page=${this.state.page}`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: (result) => {\r\n        this.setState({\r\n          questions: result.questions,\r\n          totalQuestions: result.total_questions,\r\n          categories: result.categories,\r\n          currentCategory: result.current_category })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load questions. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  selectPage(num) {\r\n    this.setState({page: num}, () => this.getQuestions());\r\n  }\r\n\r\n  createPagination(){\r\n    let pageNumbers = [];\r\n    let maxPage = Math.ceil(this.state.totalQuestions / 10)\r\n    for (let i = 1; i <= maxPage; i++) {\r\n      pageNumbers.push(\r\n        <span\r\n          key={i}\r\n          className={`page-num ${i === this.state.page ? 'active' : ''}`}\r\n          onClick={() => {this.selectPage(i)}}>{i}\r\n        </span>)\r\n    }\r\n    return pageNumbers;\r\n  }\r\n\r\n  getByCategory= (id) => {\r\n    $.ajax({\r\n      url: `/categories/${id}/questions`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: (result) => {\r\n        this.setState({\r\n          questions: result.questions,\r\n          totalQuestions: result.total_questions,\r\n          currentCategory: result.current_category })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load questions. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  submitSearch = (searchTerm) => {\r\n    $.ajax({\r\n      url: `/questions`, //TODO: update request URL\r\n      type: \"POST\",\r\n      dataType: 'json',\r\n      contentType: 'application/json',\r\n      data: JSON.stringify({searchTerm: searchTerm}),\r\n      xhrFields: {\r\n        withCredentials: true\r\n      },\r\n      crossDomain: true,\r\n      success: (result) => {\r\n        this.setState({\r\n          questions: result.questions,\r\n          totalQuestions: result.total_questions,\r\n          currentCategory: result.current_category })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load questions. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  questionAction = (id) => (action) => {\r\n    if(action === 'DELETE') {\r\n      if(window.confirm('are you sure you want to delete the question?')) {\r\n        $.ajax({\r\n          url: `/questions/${id}`, //TODO: update request URL\r\n          type: \"DELETE\",\r\n          success: (result) => {\r\n            this.getQuestions();\r\n          },\r\n          error: (error) => {\r\n            alert('Unable to load questions. Please try your request again')\r\n            return;\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"question-view\">\r\n        <div className=\"categories-list\">\r\n          <h2 onClick={() => {this.getQuestions()}}>Categories</h2>\r\n          <ul>\r\n            {Object.keys(this.state.categories).map((id, ) => (\r\n              <li key={id} onClick={() => {this.getByCategory(id)}}>\r\n                {this.state.categories[id]}\r\n                <img className=\"category\" src={`${this.state.categories[id]}.svg`}/>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <Search submitSearch={this.submitSearch}/>\r\n        </div>\r\n        <div className=\"questions-list\">\r\n          <h2>Questions</h2>\r\n          {this.state.questions.map((q, ind) => (\r\n            <Question\r\n              key={q.id}\r\n              question={q.question}\r\n              answer={q.answer}\r\n              category={this.state.categories[q.category]} \r\n              difficulty={q.difficulty}\r\n              questionAction={this.questionAction(q.id)}\r\n            />\r\n          ))}\r\n          <div className=\"pagination-menu\">\r\n            {this.createPagination()}\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuestionView;","import React, { Component } from 'react';\r\nimport '../stylesheets/Header.css';\r\n\r\nclass Header extends Component {\r\n\r\n  navTo(uri){\r\n    window.location.href = window.location.origin + uri;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App-header\">\r\n        <h1 onClick={() => {this.navTo('')}}>Udacitrivia</h1>\r\n        <h2 onClick={() => {this.navTo('')}}>List</h2>\r\n        <h2 onClick={() => {this.navTo('/add')}}>Add</h2>\r\n        <h2 onClick={() => {this.navTo('/play')}}>Play</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport $ from 'jquery';\r\n\r\nimport '../stylesheets/QuizView.css';\r\n\r\nconst questionsPerPlay = 5; \r\n\r\nclass QuizView extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n        quizCategory: null,\r\n        previousQuestions: [], \r\n        showAnswer: false,\r\n        categories: {},\r\n        numCorrect: 0,\r\n        currentQuestion: {},\r\n        guess: '',\r\n        forceEnd: false\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    $.ajax({\r\n      url: `/categories`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: (result) => {\r\n        this.setState({ categories: result.categories })\r\n        return;\r\n      },\r\n      error: () => {\r\n        alert('Unable to load categories. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  selectCategory = ({type, id=0}) => {\r\n    this.setState({quizCategory: {type, id}}, this.getNextQuestion)\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({[event.target.name]: event.target.value})\r\n  }\r\n\r\n  getNextQuestion = () => {\r\n    const previousQuestions = [...this.state.previousQuestions]\r\n    if(this.state.currentQuestion.id) { previousQuestions.push(this.state.currentQuestion.id) }\r\n\r\n    $.ajax({\r\n      url: '/quizzes', //TODO: update request URL\r\n      type: \"POST\",\r\n      dataType: 'json',\r\n      contentType: 'application/json',\r\n      data: JSON.stringify({\r\n        previous_questions: previousQuestions,\r\n        quiz_category: this.state.quizCategory\r\n      }),\r\n      xhrFields: {\r\n        withCredentials: true\r\n      },\r\n      crossDomain: true,\r\n      success: (result) => {\r\n        this.setState({\r\n          showAnswer: false,\r\n          previousQuestions: previousQuestions,\r\n          currentQuestion: result.question,\r\n          guess: '',\r\n          forceEnd: result.question ? false : true\r\n        })\r\n        return;\r\n      },\r\n      error: () => {\r\n        alert('Unable to load question. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  submitGuess = (event) => {\r\n    event.preventDefault();\r\n    let evaluate =  this.evaluateAnswer()\r\n    this.setState({\r\n      numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\r\n      showAnswer: true,\r\n    })\r\n  }\r\n\r\n  restartGame = () => {\r\n    this.setState({\r\n      quizCategory: null,\r\n      previousQuestions: [], \r\n      showAnswer: false,\r\n      numCorrect: 0,\r\n      currentQuestion: {},\r\n      guess: '',\r\n      forceEnd: false\r\n    })\r\n  }\r\n\r\n  renderPrePlay(){\r\n      return (\r\n          <div className=\"quiz-play-holder\">\r\n              <div className=\"choose-header\">Choose Category</div>\r\n              <div className=\"category-holder\">\r\n                  <div className=\"play-category\" onClick={this.selectCategory}>ALL</div>\r\n                  {Object.keys(this.state.categories).map(id => {\r\n                  return (\r\n                    <div\r\n                      key={id}\r\n                      value={id}\r\n                      className=\"play-category\"\r\n                      onClick={() => this.selectCategory({type:this.state.categories[id], id})}>\r\n                      {this.state.categories[id]}\r\n                    </div>\r\n                  )\r\n                })}\r\n              </div>\r\n          </div>\r\n      )\r\n  }\r\n\r\n  renderFinalScore(){\r\n    return(\r\n      <div className=\"quiz-play-holder\">\r\n        <div className=\"final-header\"> Your Final Score is {this.state.numCorrect}</div>\r\n        <div className=\"play-again button\" onClick={this.restartGame}> Play Again? </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  evaluateAnswer = () => {\r\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\r\n    const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\r\n    return answerArray.includes(formatGuess)\r\n  }\r\n\r\n  renderCorrectAnswer(){\r\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\r\n    let evaluate =  this.evaluateAnswer()\r\n    return(\r\n      <div className=\"quiz-play-holder\">\r\n        <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\r\n        <div className={`${evaluate ? 'correct' : 'wrong'}`}>{evaluate ? \"You were correct!\" : \"You were incorrect\"}</div>\r\n        <div className=\"quiz-answer\">{this.state.currentQuestion.answer}</div>\r\n        <div className=\"next-question button\" onClick={this.getNextQuestion}> Next Question </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderPlay(){\r\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd\r\n      ? this.renderFinalScore()\r\n      : this.state.showAnswer \r\n        ? this.renderCorrectAnswer()\r\n        : (\r\n          <div className=\"quiz-play-holder\">\r\n            <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\r\n            <form onSubmit={this.submitGuess}>\r\n              <input type=\"text\" name=\"guess\" onChange={this.handleChange}/>\r\n              <input className=\"submit-guess button\" type=\"submit\" value=\"Submit Answer\" />\r\n            </form>\r\n          </div>\r\n        )\r\n  }\r\n\r\n\r\n  render() {\r\n    return this.state.quizCategory\r\n        ? this.renderPlay()\r\n        : this.renderPrePlay()\r\n  }\r\n}\r\n\r\nexport default QuizView;","import React, { Component } from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch\r\n} from 'react-router-dom'\r\n\r\n// import logo from './logo.svg';\r\nimport './stylesheets/App.css';\r\nimport FormView from './components/FormView';\r\nimport QuestionView from './components/QuestionView';\r\nimport Header from './components/Header';\r\nimport QuizView from './components/QuizView';\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n    <div className=\"App\">\r\n      <Header path />\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/\" exact component={QuestionView} />\r\n          <Route path=\"/add\" component={FormView} />\r\n          <Route path=\"/play\" component={QuizView} />\r\n          <Route component={QuestionView} />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './stylesheets/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n\r\n //\"start\": \"HOST='127.0.0.1' PORT='5000' react-scripts start\",\r\n"],"sourceRoot":""}